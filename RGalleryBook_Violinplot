####R Gallery Book by Kyle W. Brown####
####https://bookdown.org/content/b298e479-b1ab-49fa-b83d-a57c2b034d49/

##Code Replication

######

####2.1 Violin 小提琴图 ####
  ## the distribution of a numeric variable for one or several groups

# Load the vioplot library
#install.packages("vioplot")
library(sm)
library(vioplot) #运行这个包需要XQuartz这个东西

# Create data
treatment <- c(rep("A", 40) , rep("B", 40) , rep("C", 40) ) #rep是重复的意思
value <- c( sample(2:5, 40 , replace=T) , sample(c(1:5,12:17), 40 , replace=T), sample(1:7, 40 , replace=T) ) #sample(, replace=T)是可以重复的随机数
data <- data.frame(treatment,value)

# Draw the plot
with(data , vioplot( 
  value[treatment=="A"] , value[treatment=="B"], value[treatment=="C"],  
  col=rgb(0.1,0.4,0.7,0.7) , names=c("A","B","C") 
)) 
?with #在由数据构建的环境中评估 R 表达式，可能会修改（副本）原始数据。
?vioplot #生成给定（分组）值的小提琴图，每组具有增强的注释和颜色。 包括为小提琴、箱线图和单独小提琴的各个方面定制颜色。 这支持将数据作为列表或公式输入，向后兼容 vioplot (0.2) 并在用于箱线图的公式中输入。
table(data$treatment, data$value)
#因此小提琴图下面是ABC的分类，纵坐标是value的值，宽度是个数，白点应该是平均值

##### 2.1.2 Basic ggplot Violin Plot ####
# Library
library(ggplot2)

# create a dataset
data <- data.frame(
  name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) ) 
)
?rnorm #rnorm(n, mean = 0, sd = 1)
# Most basic violin chart
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
  geom_violin()

p

#### 2.1.3 Note on Input Format ####

#Ggplot2 expects input data to be in a long format: each row is dedicated to one observation. Your input needs 2 column:
  
#A categorical variable for the X axis: Needs to be have the class factor.
#A numeric variable for the Y axis: Needs to have the class numeric.

#### 2.1.3.1 From Long Format ####

# Library
library(ggplot2)
library(dplyr)

# Create data
data <- data.frame(
  name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) ) %>% round(2)
)
head(data)

# Basic violin
ggplot(data, aes(x=name, y=value, fill=name)) + 
  geom_violin()

#### 2.1.4 From Wide Format ####

# Let's use the iris dataset as an example:
data_wide <- iris[ , 1:4]
?iris #This famous (Fisher's or Anderson's) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.
head(data_wide)

library(tidyr)
library(ggplot2)
library(dplyr)

#library(tidyverse)
data_wide %>% 
  gather(key="MesureType", value="Val") %>%
  ggplot( aes(x=MesureType, y=Val, fill=MesureType)) +
  geom_violin()
?gather #df %>% gather("key", "value", x, y, z) is equivalent to df %>% pivot_longer(c(x, y, z), names_to = "key", values_to = "value")

####2.1.5 Reorder a variable with ggplot2####
# Library
library(ggplot2)
library(dplyr)

# Dataset 1: one value per group
data0 <- data.frame(
  name=c("north","south","south-east","north-west","south-west","north-east","west","east"))


# Dataset 2: several values per group (natively provided in R)
# mpg
data <- data.frame(
  name=c("north","south","south-east","north-west","south-west","north-east","west","east"),
  val=sample(seq(1,10), 8 )
)

#### 2.1.6 Method 1: the forcats library ####
# load the library
#install.packages("forcats")
library(forcats) #Forecats 库是来自 tidyverse 的一个库，专门用于处理 R 中的因子。它提供了一套有用的工具来解决常见的因子问题。 fact_reorder() 函数允许对因子重新排序。 fact_reorder() 函数允许在另一列（此处为 data$val）的值之后对因子（例如 data$name）重新排序。
# Reorder following the value of another column:
data %>%
  mutate(name = fct_reorder(name, val)) %>% #简单理解就是fct_reorder()可以按照val的大小来重新排序name
  ggplot( aes(x=name, y=val)) +
  geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) + #alpha透明度
  coord_flip() + #旋转
  xlab("") +
  theme_bw()
?mutate #mutate() 添加新变量并保留现有变量； transmute() 添加新变量并删除现有变量。 新变量会覆盖同名的现有变量。 可以通过将其值设置为 NULL 来删除变量。
?geom_bar
?fct_reorder

# Reverse side
data %>%
  mutate(name = fct_reorder(name, desc(val))) %>% #加上desc后就是倒过来的
  ggplot( aes(x=name, y=val)) +
  geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) +
  coord_flip() +
  xlab("") +
  theme_bw()

# Using median 如果因子的每个级别有多个值，则可以指定应用哪个函数来确定顺序。 默认使用中位数，但您可以使用每组的数据点数进行分类：
mpg
mpg %>%
  mutate(class = fct_reorder(class, hwy, .fun='median')) %>% #.fun: n summary function. It should take one vector for fct_reorder, and two vectors for fct_reorder2, and return a single value.
  ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) + 
  geom_boxplot() +
  xlab("class") +
  theme(legend.position="none") +
  xlab("")
?mpg#Fuel economy data from 1999 to 2008 for 38 popular models of cars
?reorder#reorder is a generic function. The "default" method treats its first argument as a categorical variable, and reorders its levels based on the values of a second variable, usually numeric.重新排序是一个通用函数。 “默认”方法将其第一个参数视为分类变量，并根据第二个变量（通常是数字）的值对其级别重新排序。

# Using number of observation per group 使用每组观察次数
mpg %>%
  mutate(class = fct_reorder(class, hwy, .fun='length' )) %>%
  ggplot( aes(x=class, y=hwy, fill=class)) + 
  geom_boxplot() +
  xlab("class") +
  theme(legend.position="none") +
  xlab("") +
  xlab("")

# Reorder following a precise order
p <- data %>%
  mutate(name = fct_relevel(name, 
                            "north", "north-east", "east", 
                            "south-east", "south", "south-west", 
                            "west", "north-west")) %>%
  ggplot( aes(x=name, y=val)) +
  geom_boxplot() 
  geom_bar(stat="identity") +
  xlab("")
p
?fct_relevel #This is a generalisation of stats::relevel() that allows you to move any number of levels to any location.这是 stats::relevel() 的概括，它允许您将任意数量的级别移动到任何位置。
#### 2.1.7 Method 2: Using Dplyr Only ####
data %>%
  arrange(val) %>%    # First sort by val. This sort the dataframe but NOT the factor levels第一次使用排列（）对您的数据框进行排序，并按照此所需顺序对因子重新排序。
  mutate(name=factor(name, levels=name)) %>%   # This trick update the factor levels
  ggplot( aes(x=name, y=val)) +
  geom_segment( aes(xend=name, yend=0)) + #geom_segment() draws a straight line between points (x, y) and (xend, yend). geom_curve draws a curved line. See the underlying drawing function grid::curveGrob() for the parameters that control the curve.geom_segment() 在点 (x, y) 和 (xend, Yend) 之间绘制一条直线。 geom_curve 绘制一条曲线。 有关控制曲线的参数，请参阅底层绘图函数 grid::curveGrob()。
  geom_point( size=4, color="orange") +
  coord_flip() +
  theme_bw() +
  xlab("")
?geom_segment

data %>%
  arrange(val) %>%
  mutate(name = factor(name, levels=c("north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west"))) %>%
  ggplot( aes(x=name, y=val)) +
  geom_segment( aes(xend=name, yend=0)) +
  geom_point( size=4, color="orange") +
  theme_bw() +
  xlab("")

#### 2.1.8 Method 3: the reorder() Function of Base R ####
# reorder is close to order, but is made to change the order of the factor levels.
mp
mpg$class = with(mpg, reorder(class, hwy, median))
?with #Evaluate an Expression in a Data Environment

p <- mpg %>%
  ggplot( aes(x=class, y=hwy, fill=class)) + 
  geom_violin() +
  xlab("class") +
  theme(legend.position="none") +
  xlab("")
p

#### 2.1.9 Horizontal Violin Plot with ggplot2 ####
# Libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
#install.packages("hrbrthemes")
library(hrbrthemes)
library(viridis)
library(rio)

# Load dataset from github
data0 <- import("https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv") #此处如果出现Failed to connect to raw.githubusercontent.com port 443: Connection refused，参考https://zhuanlan.zhihu.com/p/360887300

# Data is at wide format, we need to make it 'tidy' or 'long'把数据从宽的变成长的，本来的列名做成一个单独的行
data <- data0 %>% 
  gather(key="text", value="value") %>%
  mutate(text = gsub("\\.", " ",text)) %>%
  mutate(value = round(as.numeric(value),0)) %>%
  filter(text %in% c("Almost Certainly","Very Good Chance","We Believe","Likely","About Even", "Little Chance", "Chances Are Slight", "Almost No Chance"))


# Plot
p <- data %>%
  mutate(text = fct_reorder(text, value)) %>% # Reorder data
  ggplot( aes(x=text, y=value, fill=text, color=text)) +
  geom_violin(width=2.1, size=0.2) +
  scale_fill_viridis(discrete=TRUE) +
  scale_color_viridis(discrete=TRUE) +
  theme_ipsum() +
  theme(
    legend.position="none"
  ) +
  coord_flip() + # This switch X and Y axis and allows to get the horizontal version
  xlab("") +
  ylab("Assigned Probability (%)")

p
#### 2.1.10 Violin Plot with included Boxplot and Sample Size in ggplot2 ####
# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)
library(viridis)

# create a dataset
data <- data.frame(
  name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)

# sample size
sample_size = data %>% group_by(name) %>% summarize(num=n())
table(data$name)

# Plot
data %>%
  left_join(sample_size) %>%
  mutate(myaxis = paste0(name, "\n", "n=", num)) %>%
  ggplot( aes(x=myaxis, y=value, fill=name)) +
  geom_violin(width=1.4) +
  geom_boxplot(width=0.1, color="grey", alpha=0.2) +
  scale_fill_viridis(discrete = TRUE) +
  theme_ipsum() +
  theme(
    legend.position="none",
    plot.title = element_text(size=11)
  ) +
  ggtitle("A Violin wrapping a boxplot") +
  xlab("")
?scale_fill_viridis
#### 2.1.11 Grouped Violin Chart with ggplot2 ####
# Libraries
library(ggplot2)
library(dplyr)
library(forcats)
library(hrbrthemes)
library(viridis)

# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
  mutate(tip = round(tip/total_bill*100, 1))

# Grouped
data %>%
  mutate(day = fct_reorder(day, tip)) %>%
  mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
  ggplot(aes(fill=sex, y=tip, x=day)) + 
  geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
  scale_fill_viridis(discrete=T, name="") +
  theme_ipsum()  +
  xlab("") +
  ylab("Tip (%)") +
  ylim(0,40)

data %>%
  mutate(day = fct_reorder(day, tip)) %>%
  ggplot(aes(fill=sex, y=tip, x=day)) + 
  geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
  scale_fill_viridis(discrete=T, name="") +
  theme_ipsum()  +
  xlab("") +
  ylab("Tip (%)") +
  ylim(0,40)
